name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  SERVER_URL: ${{ secrets.SERVER_URL || 'https://planning-poker-secure.vercel.app' }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./

  build:
    needs: deploy
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Validate secrets
      run: |
        if [ -z "${{ env.CLIENT_SECRET }}" ]; then
          echo "Error: CLIENT_SECRET is not set in repository secrets"
          exit 1
        fi
    
    - name: Build client with embedded config
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Get version info
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=${GITHUB_SHA::8}
        DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        # Create build-time configuration
        BUILD_FLAGS="-ldflags=-s -w -X 'main.BuildServerURL=${{ env.SERVER_URL }}' -X 'main.BuildClientSecret=${{ env.CLIENT_SECRET }}' -X 'main.BuildVersion=${VERSION}' -X 'main.BuildCommit=${COMMIT}' -X 'main.BuildDate=${DATE}'"
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build $BUILD_FLAGS -o planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }}.exe ./cmd/client
        else
          go build $BUILD_FLAGS -o planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }} ./cmd/client
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: planning_poker_${{ matrix.goos }}_${{ matrix.goarch }}
        path: planning_poker_secure_*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/planning_poker_secure_*
        body: |
          ## üöÄ Planning Poker - Secure Release
          
          ### What's New
          - ‚ú® Beautiful TUI interface with modern styling
          - üîê Secure authentication system
          - üõ°Ô∏è DDoS protection and rate limiting
          - üè† Host-only game controls
          - üë• Real-time participant tracking
          - üîí Vote locking system
          - üßπ Automatic room cleanup
          - ‚òÅÔ∏è **Server automatically deployed to Vercel**
          
          ### Download Instructions
          1. Download the appropriate binary for your system
          2. Make it executable (Linux/macOS): `chmod +x planning_poker_secure_*`
          3. Run the application: `./planning_poker_secure_*`
          
          **Note**: This release has the server URL and authentication pre-configured.
          The server is automatically deployed and ready to use!
          
          ### Supported Platforms
          - Windows (amd64)
          - Linux (amd64, arm64)
          - macOS (amd64, arm64)
          
          ### Security
          This release includes authentication and rate limiting for secure usage.
          Server deployed with production security settings.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
