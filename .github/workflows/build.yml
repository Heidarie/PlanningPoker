name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  SERVER_URL: ${{ secrets.DIGITALOCEAN_APP_URL || 'https://your-app.ondigitalocean.app' }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

jobs:
  deploy-server:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: App Platform deployment info
      run: |
        if [ -z "${{ secrets.CLIENT_SECRET }}" ]; then
          echo "‚ùå ERROR: CLIENT_SECRET is required but not set in GitHub secrets"
          echo "Please add CLIENT_SECRET to your GitHub repository secrets"
          exit 1
        fi
        
        echo "‚úÖ Using DigitalOcean App Platform deployment"
        echo "üìù App Platform will automatically deploy from your repository"
        echo "üîß Make sure to set CLIENT_SECRET in your App Platform environment variables"
        echo "üåê Your app URL should be set as DIGITALOCEAN_APP_URL secret"
        echo ""
        echo "üìã Setup checklist:"
        echo "1. ‚úÖ Create app on DigitalOcean App Platform"
        echo "2. ‚úÖ Connect your GitHub repository"
        echo "3. ‚úÖ Set CLIENT_SECRET environment variable in App Platform"
        echo "4. ‚úÖ Set DIGITALOCEAN_APP_URL secret in GitHub"
        echo "5. ‚úÖ App Platform will auto-deploy on every push to main"
    
    - name: Build server binary
      env:
        CGO_ENABLED: 0
        GOOS: linux
        GOARCH: amd64
      run: |
        echo "üèóÔ∏è  Building server binary for Linux..."
        go mod download
        go build -ldflags="-s -w" -o planning_poker_server ./cmd/server
        chmod +x planning_poker_server
        echo "‚úÖ Server binary built successfully"
    
    - name: Create deployment package
      run: |
        echo "ÔøΩ Creating deployment package..."
        
        # Create systemd service file
        cat > planning_poker.service << EOF
        [Unit]
        Description=Planning Poker Server
        After=network.target
        
        [Service]
        Type=simple
        User=planning-poker
        WorkingDirectory=/opt/planning-poker
        ExecStart=/opt/planning-poker/planning_poker_server
        Restart=always
        RestartSec=5
        Environment=CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
        Environment=PORT=8080
        
        [Install]
        WantedBy=multi-user.target
        EOF
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting Planning Poker deployment..."
        
        # Create user if doesn't exist
        if ! id "planning-poker" &>/dev/null; then
            sudo useradd -r -s /bin/false planning-poker
            echo "‚úÖ Created planning-poker user"
        fi
        
        # Create directories
        sudo mkdir -p /opt/planning-poker
        sudo chown planning-poker:planning-poker /opt/planning-poker
        
        # Stop service if running
        sudo systemctl stop planning-poker || true
        
        # Copy binary
        sudo cp planning_poker_server /opt/planning-poker/
        sudo chown planning-poker:planning-poker /opt/planning-poker/planning_poker_server
        sudo chmod +x /opt/planning-poker/planning_poker_server
        
        # Install systemd service
        sudo cp planning_poker.service /etc/systemd/system/
        sudo systemctl daemon-reload
        sudo systemctl enable planning-poker
        sudo systemctl start planning-poker
        
        echo "‚úÖ Planning Poker server deployed successfully!"
        echo "üîç Check status: sudo systemctl status planning-poker"
        echo "üìã View logs: sudo journalctl -u planning-poker -f"
        EOF
        
        chmod +x deploy.sh
        echo "‚úÖ Deployment package created"
    
    - name: Deploy to DigitalOcean (SSH)
      if: ${{ secrets.DIGITALOCEAN_DROPLET_IP && secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "üåä Deploying to DigitalOcean via SSH..."
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DIGITALOCEAN_DROPLET_IP }} >> ~/.ssh/known_hosts
        
        # Copy files to server
        scp planning_poker_server planning_poker.service deploy.sh root@${{ secrets.DIGITALOCEAN_DROPLET_IP }}:/tmp/
        
        # Run deployment script
        ssh root@${{ secrets.DIGITALOCEAN_DROPLET_IP }} "cd /tmp && ./deploy.sh"
        
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Server should be running at: ${{ env.SERVER_URL }}"
    
    - name: Upload deployment artifacts
      if: ${{ !secrets.DIGITALOCEAN_DROPLET_IP || !secrets.SSH_PRIVATE_KEY }}
      uses: actions/upload-artifact@v4
      with:
        name: digitalocean-deployment-package
        path: |
          planning_poker_server
          planning_poker.service
          deploy.sh

  build-clients:
    runs-on: ubuntu-latest
    needs: [deploy-server]
    if: always()
    
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Workflow info
      run: |
        echo "Trigger: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Is tag: ${{ startsWith(github.ref, 'refs/tags/') }}"
        echo "Deploy job will run: ${{ startsWith(github.ref, 'refs/tags/') }}"
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Validate secrets
      run: |
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
          if [ -z "${{ env.CLIENT_SECRET }}" ]; then
            echo "Error: CLIENT_SECRET is required for tag builds"
            exit 1
          fi
        else
          echo "Non-tag build: CLIENT_SECRET validation skipped"
        fi
    
    - name: Build client with embedded config
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Get version info
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-${{ github.sha }}"
        fi
        COMMIT=${GITHUB_SHA::8}
        DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        # Set default values for development builds
        SERVER_URL="${{ env.SERVER_URL }}"
        CLIENT_SECRET="${{ env.CLIENT_SECRET }}"
        
        if [ -z "$CLIENT_SECRET" ]; then
          echo "‚ùå ERROR: CLIENT_SECRET is required for production builds"
          echo "Please add CLIENT_SECRET to your GitHub repository secrets"
          exit 1
        else
          echo "‚úÖ CLIENT_SECRET is configured for production build"
        fi
        
        if [ -z "$SERVER_URL" ]; then
          SERVER_URL="http://localhost:8080"
          echo "‚ö†Ô∏è  Using development SERVER_URL"
        fi
        
        # Create build-time configuration  
        LDFLAGS="-s -w -X main.BuildServerURL=${SERVER_URL} -X main.BuildClientSecret=${CLIENT_SECRET} -X main.BuildVersion=${VERSION} -X main.BuildCommit=${COMMIT} -X main.BuildDate=${DATE}"
        
        echo "üîß Building with configuration:"
        echo "  Version: ${VERSION}"
        echo "  Server URL: ${SERVER_URL}"
        echo "  Client Secret: $(echo ${CLIENT_SECRET} | cut -c1-8)..."
        echo "  Platform: ${{ matrix.goos }}/${{ matrix.goarch }}"
        echo "  LDFLAGS: ${LDFLAGS}"
        
        echo "üèóÔ∏è  Starting Go build..."
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags="${LDFLAGS}" -o planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }}.exe ./cmd/client
          echo "‚úÖ Built: planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }}.exe"
        else
          go build -ldflags="${LDFLAGS}" -o planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }} ./cmd/client
          echo "‚úÖ Built: planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }}"
        fi
        
        # Verify the binary was created
        if [ "${{ matrix.goos }}" = "windows" ]; then
          ls -la planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }}.exe
        else
          ls -la planning_poker_secure_${{ matrix.goos }}_${{ matrix.goarch }}
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: planning_poker_${{ matrix.goos }}_${{ matrix.goarch }}
        path: planning_poker_secure_*

  release:
    needs: build-clients
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/planning_poker_secure_*
        body: |
          ## üöÄ Planning Poker - Secure Release
          
          ### What's New
          - ‚ú® Beautiful TUI interface with modern styling
          - üîê Secure authentication system
          - üõ°Ô∏è DDoS protection and rate limiting
          - üè† Host-only game controls
          - üë• Real-time participant tracking
          - üîí Vote locking system
          - üßπ Automatic room cleanup
          - üåä **Server automatically deployed to DigitalOcean**
          
          ### Download Instructions
          1. Download the appropriate binary for your system
          2. Make it executable (Linux/macOS): `chmod +x planning_poker_secure_*`
          3. Run the application: `./planning_poker_secure_*`
          
          **Note**: This release has the server URL and authentication pre-configured.
          The server is automatically deployed to DigitalOcean and ready to use!
          
          ### Supported Platforms
          - Windows (amd64)
          - Linux (amd64, arm64)
          - macOS (amd64, arm64)
          
          ### Security
          This release includes authentication and rate limiting for secure usage.
          Server deployed with production security settings on DigitalOcean.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
