name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  SERVER_URL: ${{ secrets.SERVER_URL || 'https://your-app.ondigitalocean.app' }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

jobs:
  deploy-server:
    runs-on: ubuntu-latest
    steps:
    - name: App Platform deployment info
      run: |
        echo "üåä DigitalOcean App Platform Deployment"
        echo "======================================="
        echo ""
        echo "‚ÑπÔ∏è  App Platform automatically deploys your server from this repository"
        echo "üìÇ Server code: ./cmd/server/"
        echo "‚öôÔ∏è  Configuration: ./.do/app.yaml"
        echo ""
        
        if [ -z "${{ secrets.SERVER_URL }}" ]; then
          echo "‚ö†Ô∏è  DIGITALOCEAN_APP_URL secret is not set!"
          echo "üìù Please set it to your App Platform app URL (e.g., https://your-app.ondigitalocean.app)"
          exit 1
        fi
        
        echo "‚úÖ Using DigitalOcean App Platform deployment"
        echo "üìù App Platform will automatically deploy from your repository"
        echo "üîß Make sure to set CLIENT_SECRET in your App Platform environment variables"
        echo "üåê Your app URL should be set as DIGITALOCEAN_APP_URL secret"
        echo ""
        echo "üìã Setup checklist:"
        echo "1. ‚úÖ Create app on DigitalOcean App Platform"
        echo "2. ‚úÖ Connect your GitHub repository"
        echo "3. ‚úÖ Set CLIENT_SECRET environment variable in App Platform"
        echo "4. ‚úÖ Set DIGITALOCEAN_APP_URL secret in GitHub"
        echo "5. ‚úÖ App Platform will auto-deploy on every push to main"
        echo ""
        echo "üìñ For detailed setup: See DIGITALOCEAN_APP_PLATFORM.md"
        echo "üåê App Platform handles server deployment automatically!"
        echo "üéØ This workflow only builds client binaries with your App Platform URL"

  build-clients:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Workflow info
      run: |
        echo "üèóÔ∏è  Building Planning Poker CLI client"
        echo "OS: ${{ matrix.goos }}"
        echo "Arch: ${{ matrix.goarch }}"
        echo "Server URL: ${{ env.SERVER_URL }}"
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
          echo "Building release version with CLIENT_SECRET"
        else
          echo "Building development version"
        fi
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Validate secrets
      run: |
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
          if [ -z "${{ env.CLIENT_SECRET }}" ]; then
            echo "Error: CLIENT_SECRET is required for tag builds"
            exit 1
          fi
        else
          echo "Non-tag build: CLIENT_SECRET validation skipped"
        fi
    
    - name: Build client with embedded config
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
        CLIENT_SECRET: ${{ env.CLIENT_SECRET }}
        SERVER_URL: ${{ env.SERVER_URL }}
      run: |
        # Get version info
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-${{ github.sha }}"
        fi
        
        echo "Building version: $VERSION"
        echo "Target: $GOOS/$GOARCH"
        echo "Server URL: $SERVER_URL"
        
        # Build with embedded configuration for tagged releases
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
          echo "Building with embedded CLIENT_SECRET for release"
          go build -ldflags="-s -w -X 'github.com/heidarie/planning-poker/internal/client.BuildTimeServerURL=$SERVER_URL' -X 'github.com/heidarie/planning-poker/internal/client.BuildTimeClientSecret=$CLIENT_SECRET' -X 'github.com/heidarie/planning-poker/internal/client.BuildTimeVersion=$VERSION'" -o cli_planning_poker ./cmd/client
        else
          echo "Building development version without embedded secrets"
          go build -ldflags="-s -w -X 'github.com/heidarie/planning-poker/internal/client.BuildTimeServerURL=$SERVER_URL' -X 'github.com/heidarie/planning-poker/internal/client.BuildTimeVersion=$VERSION'" -o cli_planning_poker ./cmd/client
        fi
        
        # Create platform-specific filename
        BINARY_NAME="cli_planning_poker"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Rename binary with platform suffix
        FINAL_NAME="cli_planning_poker_${GOOS}_${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          FINAL_NAME="${FINAL_NAME}.exe"
        fi
        
        mv $BINARY_NAME $FINAL_NAME
        
        echo "‚úÖ Built: $FINAL_NAME"
        ls -la $FINAL_NAME
    
    - name: Upload client artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-${{ matrix.goos }}-${{ matrix.goarch }}
        path: cli_planning_poker_${{ matrix.goos }}_${{ matrix.goarch }}*
        retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-clients
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    
    - name: Display downloaded files
      run: ls -la
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          cli_planning_poker_*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
        body: |
          ## Planning Poker CLI Release
          
          ### üöÄ DigitalOcean App Platform Deployment
          
          This release includes pre-configured clients for DigitalOcean App Platform deployment.
          
          ### üì¶ Downloads
          
          Choose the appropriate binary for your platform:
          
          - **Windows (64-bit)**: `cli_planning_poker_windows_amd64.exe`
          - **Linux (64-bit)**: `cli_planning_poker_linux_amd64`
          - **Linux (ARM64)**: `cli_planning_poker_linux_arm64`
          - **macOS (Intel)**: `cli_planning_poker_darwin_amd64`
          - **macOS (Apple Silicon)**: `cli_planning_poker_darwin_arm64`
          
          ### ‚öôÔ∏è Configuration
          
          These binaries are pre-configured with:
          - **Server URL**: ${{ env.SERVER_URL }}
          - **Authentication**: Embedded client secret (secure)
          
          ### üèÉ‚Äç‚ôÇÔ∏è Usage
          
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x cli_planning_poker_*`
          3. Run: `./cli_planning_poker_*` (or double-click on Windows)
          
          ### üìñ Documentation
          
          - [Setup Guide](DIGITALOCEAN_APP_PLATFORM.md)
          - [Migration from Vercel](MIGRATION_GUIDE.md)
          
          The server is automatically deployed to DigitalOcean App Platform from this repository.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}